from aiogram import F, Router, Bot

from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import aiogram_calendar


import keyboards.keyboards as kb

from filters.admin_filter import check_super_admin
from database.models import User
import database.requests as rq
import database.help_function as hf
from datetime import time, date, datetime, timedelta
from filters.admin_filter import IsSuperAdmin
from filters.filters import validate_date, validate_overdue, validate_amount



router = Router()

storage = MemoryStorage()

import logging
import asyncio
class AddLocationsFSM(StatesGroup):
    state_add_name_location = State()
    state_add_photo_location = State()
    state_after_add_location = State()

# class PeriodExpenseFSM(StatesGroup):
#     state_start_perid_expense = State()
#     state_finish_period_expense = State()
###    logging.info(f'await state.get() = {await state.get_state()} --- await state.get_data() = {await state.get_data()}')

@router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ üìç')#, IsSuperAdmin())
async def process_locations(message: Message, bot: Bot):
    logging.info('process_locations')
    #await hf.process_del_message_messsage(3, bot, message)

    keyboard = kb.keyboards_main_menu()
    await message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)

    dict_kb = {'–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é': 'choice_location', '–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫': 'edit_location'}
    keyboard = kb.create_in_kb(2, **dict_kb)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏.', reply_markup=keyboard)



@router.callback_query(F.data == 'choice_location')
async def process_choise_category_location(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é"""
    logging.info('process_choise_category_location')


    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass

    # keyboard = kb.keyboards_main_menu()
    # await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)
    dict_kb = {
        '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'category_location!restaurant',
        '–õ–æ—Ñ—Ç': 'category_location!loft',
        '–ù–∞–∑–∞–¥': 'back_to_process_locations', # —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        }
    keyboard = kb.create_in_kb(1, **dict_kb)
    await clb.message.edit_text(text=f'–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', reply_markup=keyboard)
    await clb.answer()



@router.callback_query(F.data.startswith('category_location!'))
async def process_choise_name_location(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–∫–∞—Ü–∏—é"""
    logging.info(f'process_choise_name_location --- clb.data = {clb.data}')

    category = clb.data.split('!')[-1]
    await state.update_data(category = category)
    list_locations: list = []
    for location in await rq.get_locations():
        if location.category_location == category:
            list_ = [location.name_location, f'name_location!{location.id}']
            list_locations.append(list_)
    logging.info(f'list_locations = {list_locations}')

    keyboard = kb.create_kb_pagination(
            list_button=list_locations,
            back=0,
            forward=2,
            count=5,
            prefix='choice_location', # —ç—Ç–æ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–æ–∫ <<< –∏ >>>
            button_go_away='choice_location'
        )
    try:
        await clb.message.edit_text(text='–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', reply_markup=keyboard)
        await clb.answer()
    except:
        #await hf.process_del_message_clb(1, bot, clb)
        await clb.message.answer(text='–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', reply_markup=keyboard)
        await clb.answer()

# >>>>
@router.callback_query(F.data.startswith('button_forward!choice_location'))
async def process_forward_choice_location(clb: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_forward_choice_location: {clb.message.chat.id} ----- clb.data = {clb.data}')

    forward = int(clb.data.split('!')[-1]) + 1
    back = forward - 2
    logging.info(f'forward = {forward} --- back = {back}')

    category = (await state.get_data())['category']

    list_locations: list = []
    for location in await rq.get_locations():
        if location.category_location == category:
            list_ = [location.name_location, f'name_location!{location.id}']
            list_locations.append(list_)
    logging.info(f'list_locations = {list_locations}')

    keyboard = kb.create_kb_pagination(
                    list_button=list_locations,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='choice_location',
                    button_go_away='choice_location'
                )
    #logging.info(f'keyboard = {keyboard}')
    #await asyncio.sleep(7)

    try:
        await clb.message.edit_text(text='–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Çe –≤—ã–±—Ä–∞—Ç—å?', reply_markup=keyboard)
    except:
        await clb.message.edit_text(text='–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é –≤—ã —Öo—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', reply_markup=keyboard)
    await clb.answer()


# <<<<
@router.callback_query(F.data.startswith('button_back!choice_location'))
async def process_back_choice_location(clb: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_back_choice_location: {clb.message.chat.id} ----- clb.data = {clb.data}')

    back = int(clb.data.split('!')[-1]) - 1
    forward = back + 2
    logging.info(f'forward = {forward} --- back = {back}')

    category = (await state.get_data())['category']

    list_locations: list = []
    for location in await rq.get_locations():
        if location.category_location == category:
            list_ = [location.name_location, f'name_location!{location.id}']
            list_locations.append(list_)
    logging.info(f'list_locations = {list_locations}')
    keyboard = kb.create_kb_pagination(
                    list_button=list_locations,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='choice_location',
                    button_go_away='choice_location'
                )
   # logging.info(f'keyboard = {keyboard}')
    try:
        await clb.message.edit_text(text='–ö–∞–∫—É—é –ªo–∫–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Çe –≤—ã–±—Ä–∞—Ç—å?', reply_markup=keyboard)
    except:
        await clb.message.edit_text(text='–öa–∫—É—é –ª–æ–∫–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±p–∞—Ç—å?', reply_markup=keyboard)
    await clb.answer()


@router.callback_query(F.data.startswith('name_location!'))  #  list_ = [location.name_location, f'name_location!{location.id}']
async def process_show_card_location(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ–∫–∞—Ü–∏—é"""
    logging.info(f'process_show_card_location --- clb.data = {clb.data}')

    #await hf.process_del_message_clb(1, bot, clb)
    id_location = clb.data.split('!')[-1]
    data_ = await rq.get_location_by_id(id_location)
    keyboard = kb.create_in_kb(1, **{'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å': f'show_profile_location!{data_.id}',
                                     '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞—Ü–∏–∏': f'show_photo_location!{data_.id}',
                                     f'–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é {data_.name_location}': f'choice_location_set_to_task!{data_.id}',  # –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ª–æ—Ñ—Ç/—Ä–µ—Å—Ç–æ—Ä–∞–Ω/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∏ –¥—Ä.
                                     '–ù–∞–∑–∞–¥': f'category_location!{data_.category_location}'})
    #list_photo = data_.photo_location.split(',')
    #media_group.append(InputMediaPhoto(media=photo.split('!')[0], caption=caption))

    #logging.info(data_.photo_location.split(','))
    #logging.info(data_.photo_location.split(',')[1:])
    # media_group = []
    # for photo in data_.photo_location.split(','):
    #     media_group.append(InputMediaPhoto(media=photo))
    #     logging.info(photo)
    #     logging.info(media_group)
    # if media_group:
    #     # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    #     logging.info(f'media_group')
    #     await clb.message.answer_media_group(media=media_group)
    if data_.category_location == 'loft':
        postfix = '—Ä—É–±/—á–∞—Å'
    elif data_.category_location == 'restaurant':
        postfix = '—Ä—É–±/—á–µ–ª'
    await clb.message.answer_photo(
        photo=data_.photo_location,
        caption=f'{data_.name_location} - {data_.description_location}\n'
        f'üè¢ <b>–ê–¥—Ä–µ—Å:</b> {data_.adress_location}\n'
        f'üí• <b>–ü–ª–æ—â–∞–¥—å:</b> {data_.area_location}\n'
        f'üë´ <b>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {data_.capacity_location}\n'
        f'‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥:</b> {data_.reiting_location}\n'
        f'üí∂ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {data_.cost_location} {postfix}\n'
        f'üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b> {data_.phone_location}\n',
        reply_markup=keyboard
    )
    await clb.answer()

    # await clb.message.answer(
    #     text=
    #     f'{data_.name_location} - {data_.description_location}\n'
    #     f'<b>–ê–¥—Ä–µ—Å:</b> {data_.adress_location}\n'
    #     f'<b>–ü–ª–æ—â–∞–¥—å:</b> {data_.area_location}\n'
    #     f'<b>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {data_.capacity_location}\n'
    #     f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {data_.reiting_location}\n'
    #     f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {data_.cost_location} —Ä—É–±/—á–∞—Å\n'
    #     f'<b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b> {data_.phone_location}\n',
    #     reply_markup=keyboard
    # )



   # logging.info(f'list_photo = {list_photo} --- list_photo[0] = {list_photo[0]}')

    # await clb.message.answer_photo(
    #     photo=data_.photo_location.split(',')[0],  #data_.photo_location,
    #     caption=
    #     f'{data_.name_location} - {data_.description_location}\n'
    #     f'<b>–ê–¥—Ä–µ—Å:</b> {data_.adress_location}\n'
    #     f'<b>–ü–ª–æ—â–∞–¥—å:</b> {data_.area_location}\n'
    #     f'<b>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {data_.capacity_location}\n'
    #     f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {data_.reiting_location}\n'
    #     f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {data_.cost_location} —Ä—É–±/—á–∞—Å\n'
    #     f'<b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b> {data_.phone_location}\n',
    #     reply_markup=keyboard
    # )


@router.callback_query(F.data.startswith('show_profile_location!'))  #  {'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å': f'show_profile_location!{data_.id}'
async def process_show_profile_location(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ª–æ–∫–∞—Ü–∏—é"""
    logging.info(f'process_show_profile_location --- clb.data = {clb.data}')
    #await hf.process_del_message_clb(1, bot, clb)
    id_location = int(clb.data.split('!')[-1])
    data_ = await rq.get_location_by_id(id_location)
    keyboard = kb.create_in_kb(1, **{'–ù–∞–∑–∞–¥': f'name_location!{id_location}'})
    await clb.message.answer(text=f'{data_.name_location}\n{data_.profile_location}', reply_markup=keyboard)
    await clb.answer()


@router.callback_query(F.data.startswith('show_photo_location!'))  #  '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞—Ü–∏–∏': f'show_photo_location!{data_.id}',
async def process_show_photo_location(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞—Ü–∏–∏"""
    logging.info(f'process_show_photo_location --- clb.data = {clb.data}')
    #await hf.process_del_message_clb(1, bot, clb)
    id_location = int(clb.data.split('!')[-1])
    data_ = await rq.get_location_by_id(id_location)
    keyboard = kb.create_in_kb(1, **{'–ù–∞–∑–∞–¥': f'name_location!{id_location}'})

    media_group = []
    if data_.additional_photo_location:
        for photo in data_.additional_photo_location.split(','):
            media_group.append(InputMediaPhoto(media=photo))
            logging.info(photo)
            logging.info(media_group)
        if media_group:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            logging.info(f'media_group')
            await clb.message.answer(text=f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ {data_.name_location}:')
            await clb.message.answer_media_group(media=media_group)
            await clb.message.answer(text=f'–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ª–æ–∫–∞—Ü–∏–∏ {data_.name_location}', reply_markup=keyboard)
            await clb.answer()
            return
        else:
            await clb.message.answer(text='–ü—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç. –ò—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∂–∏—Ä–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=keyboard)
            await clb.answer()
            return

    await clb.message.answer(text='–ü—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç. –ò—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∂–∏—Ä–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=keyboard)
    await clb.answer()


@router.callback_query(F.data.startswith('choice_location_set_to_task!'))  #  f'–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é {data_.name_location}': f'choice_location_set_to_task!{data_.id}',
async def process_choice_location_set_to_task(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–í —Ç–∞–±–ª–∏—Ü—É Task —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–µ—Ç–∫–æ–π 'location' –≤ –≥—Ä–∞—Ñ–µ status_task"""
    logging.info(f'process_choice_location_set_to_task --- clb.data = {clb.data}')
    #await hf.process_del_message_clb(1, bot, clb)
    id_location = int(clb.data.split('!')[-1])
    id_event = await rq.get_current_event_id()
    data_ = await rq.get_location_by_id(id_location)
    # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É Task
    dict_task = {'tg_id': clb.message.chat.id, 'title_task': f'{data_.id}!?!{data_.name_location}', 'id_event': id_event, 'deadline_task': 'note', 'status_task': 'location'}
    logging.info(dict_task)
    # –º–æ–∂–Ω–æ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ –±—ã–ª–æ –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å
    id_task_location = 0 # —Ç–∞–∫–æ–≥–æ id –≤ —Ç–∞–±–ª–∏—Ü–µ task –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç, –∏ –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ 0, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
    for task in await rq.get_tasks():
        if task.status_task == 'location' and id_event == task.id_event and task.tg_id == clb.message.chat.id:
            id_task_location = task.id
            logging.info(f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ TASK —Å —ç—Ç–∏–º id: id_task_location = {id_task_location}')
    if id_task_location:
        await rq.set_task(
            id_task=id_task_location,
            title_task=f'{data_.id}!?!{data_.name_location}'
            )
        logging.info(f'title_task = {data_.name_location} --- data_.name_location = {data_.name_location}')
    else:
        await rq.add_task(dict_task)
        logging.info('–õ–û–ö–ê–¶–ò–Ø –û–¢–°–£–¢–°–¢–í–û–í–ê–õ–ê - –î–û–ë–ê–í–õ–Ø–ï–ú')
    keyboard = kb.create_in_kb(1, **{'–ù–∞–∑–∞–¥': f'name_location!{id_location}'})
    await clb.message.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é {data_.name_location} –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {await rq.get_current_event()}', reply_markup=keyboard)
    await clb.answer()


@router.callback_query(F.data == 'back_to_process_locations')
async def process_go_to_location(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î –≤ –ª–æ–∫–∞—Ü–∏—é—è"""
    logging.info(f'process_go_to_location --- clb.data = {clb.data}')
    #await hf.process_del_message_clb(3, bot, clb)
    if clb.data == 'back_to_process_locations':
        await process_locations(clb.message, bot)
    await clb.answer()