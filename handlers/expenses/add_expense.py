from aiogram import F, Router, Bot

from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.state import State, default_state, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import aiogram_calendar
from datetime import datetime, time, timedelta
from aiogram.filters.callback_data import CallbackData

import keyboards.keyboards as kb

from filters.admin_filter import check_super_admin
from database.models import User
import database.requests as rq
import database.help_function as hf
from datetime import time, date, datetime, timedelta
from filters.admin_filter import IsSuperAdmin
from filters.filters import validate_date, validate_overdue, validate_amount



router = Router()

storage = MemoryStorage()

import logging
import asyncio

class ExpenseFSM(StatesGroup):
    state_add_title_expense = State()
    state_add_amount_expense = State()
   # st_3 = State()



@router.message(F.text == '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç üí∏')#, IsSuperAdmin())
async def process_expense(message: Message, bot: Bot):
    logging.info('process_expense')
    #await hf.process_del_message_messsage(3, bot, message)
    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-i)
    #     except:
    #         pass

    keyboard = kb.keyboards_main_menu()
    await message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)

    dict_kb = {'–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥': 'add_expense', '–ú–æ–π –±—é–¥–∂–µ—Ç': 'my_expenses'}
    keyboard = kb.create_in_kb(1, **dict_kb)
    await message.answer(text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.', reply_markup=keyboard)



@router.callback_query(F.data == 'add_expense')
async def process_add_title_expense(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥, –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –†–∞—Å—Ö–æ–¥–∞ –∏ –µ—Å–ª–∏ –µ—Å—Ç—å —É–∂–µ —Ä–∞—Ö–æ–¥—ã - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö"""
    logging.info('process_add_title_expense')
    # #await hf.process_del_message_clb(4, bot, clb)
    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass

    await state.set_state(ExpenseFSM.state_add_title_expense) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –†–∞—Å—Ö–æ–¥–∞


    list_expenses: list = []
    temp_list_this_expenses: list = []

    for expense in await rq.get_expenses():
        if not expense.title_expense in temp_list_this_expenses and expense.tg_id == clb.message.chat.id:
            temp_list_this_expenses.append(expense.title_expense)

            id_expense = expense.id
            title_expense = expense.title_expense
            list_expenses.append([title_expense, f'{id_expense}!add_expense_start'])

    logging.info(f'list_events = {list_expenses} --- temp_list_this_expenses = {temp_list_this_expenses} ---- ')



    if not list_expenses: # –µ—Å–ª–∏ –ø—É—Å—Ç–æ –≤ —Ç–∞–±–ª—Ü–µ Event
        await clb.message.edit_text(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞')

    else: # –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Event –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–∂—É –Ω–∞ –∫–Ω–æ–ø–∫–∏
        # keyboard = kb.keyboards_main_menu()
        # await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)
        keyboard = kb.create_kb_pagination(
            list_button=list_expenses,
            back=0,
            forward=2,
            count=5,
            prefix='add_expense', # —ç—Ç–æ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–æ–∫ <<< –∏ >>>
            button_go_away='button_back_process_expense' # —á–µ—Ä–µ–∑ —Ö—ç–Ω–¥–ª–µ—Ä "–ù–∞–∑–∞–¥", —Ç.–∫. —Ç–∞–º –Ω–∞–¥–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Å—Å–∞–¥–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        )
        await clb.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö', reply_markup=keyboard)
        await clb.answer()

# >>>>
@router.callback_query(F.data.startswith('button_forward!add_expense'))
async def process_forward_add_expense(clb: CallbackQuery) -> None:
    logging.info(f'process_forward_expense: {clb.message.chat.id} ----- clb.data = {clb.data}')

    forward = int(clb.data.split('!')[-1]) + 1
    back = forward - 2
    logging.info(f'forward = {forward} --- back = {back}')

    list_expenses: list = []
    temp_list_this_expenses: list = []
    # temp_dict_expenses: dict = {}
    for expense in await rq.get_expenses():
        if not expense.title_expense in temp_list_this_expenses and expense.tg_id == clb.message.chat.id:
            temp_list_this_expenses.append(expense.title_expense)
            # temp_dict_expenses.update({expense.title_expense: [expense.id]})
            id_expense = expense.id
            title_expense = expense.title_expense
            list_expenses.append([title_expense, f'{id_expense}!add_expense_start']) # F.data.endswith('add_expense_start')
        # else:
            # temp_dict_expenses[expense.title_expense].append(expense.id)


    keyboard = kb.create_kb_pagination(
                    list_button=list_expenses,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='add_expense', # —ç—Ç–æ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–æ–∫ <<< –∏ >>>
                    button_go_away='button_back_process_expense' # —á–µ—Ä–µ–∑ —Ö—ç–Ω–¥–ª–µ—Ä "–ù–∞–∑–∞–¥", —Ç.–∫. —Ç–∞–º –Ω–∞–¥–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Å—Å–∞–¥–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                )

    try:
        await clb.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö', reply_markup=keyboard)
    except:
        await clb.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ãx', reply_markup=keyboard)
    await clb.answer()



# <<<<
@router.callback_query(F.data.startswith('button_back!add_expense'))
async def process_forward_extense_category(clb: CallbackQuery) -> None:
    logging.info(f'process_back: {clb.message.chat.id} ----- clb.data = {clb.data}')

    back = int(clb.data.split('!')[-1]) - 1
    forward = back + 2
    logging.info(f'forward = {forward} --- back = {back}')

    list_expenses: list = []
    temp_list_this_expenses: list = []
    # temp_dict_expenses: dict = {}
    for expense in await rq.get_expenses():
        if not expense.title_expense in temp_list_this_expenses and expense.tg_id == clb.message.chat.id:
            temp_list_this_expenses.append(expense.title_expense)
            # temp_dict_expenses.update({expense.title_expense: [expense.id]})
            id_expense = expense.id
            title_expense = expense.title_expense
            list_expenses.append([title_expense, f'{id_expense}!add_expense_start']) # F.data.endswith('add_expense_start')
        # else:
            # temp_dict_expenses[expense.title_expense].append(expense.id)




    keyboard = kb.create_kb_pagination(
                    list_button=list_expenses,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='add_expense', # —ç—Ç–æ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–æ–∫ <<< –∏ >>>
                    button_go_away='button_back_process_expense' # —á–µ—Ä–µ–∑ —Ö—ç–Ω–¥–ª–µ—Ä "–ù–∞–∑–∞–¥", —Ç.–∫. —Ç–∞–º –Ω–∞–¥–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Å—Å–∞–¥–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                )
    try:
        await clb.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö', reply_markup=keyboard)
    except:
        await clb.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ãx', reply_markup=keyboard)
    await clb.answer()


@router.message(StateFilter(ExpenseFSM.state_add_title_expense))#, F.text)
async def process_add_title_expense_input(message: Message, state: FSMContext, bot: Bot) -> None:
    """ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –†–∞—Å—Ö–æ–¥–∞, –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–ª–¥–∞"""
    logging.info('process_add_title_expense_input')

    # for i in range (2):
    #     try:
    #         await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-i)
    #     except:
    #         pass
    title_expense = message.text
    await state.update_data({'title_expense': title_expense})

    # keyboard = kb.keyboards_main_menu()
    # await message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)
    dict_kb = {'–ù–∞–∑–∞–¥': 'add_expense'}
    keyboard = kb.create_in_kb(1, **dict_kb)
    await message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{title_expense}</b>', reply_markup=keyboard)

    await state.set_state(ExpenseFSM.state_add_amount_expense)



@router.callback_query(F.data.endswith('add_expense_start'))
async def process_add_title_expense_input_callback(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–î–ª—è –∏–º–µ—é—â–µ–≥–æ—è —Ä–∞—Å—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å–≤–µ—Ç–∏–ª—Å—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ """
    logging.info(f'process_add_title_expense_input_callback --- clb.data = {clb.data}')

    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass

    id_expense = int(clb.data.split('!')[0])
    title_expense = (await rq.get_expense_by_id(id_expense=id_expense)).title_expense
    await state.update_data({'title_expense': title_expense}) # –¢.–∫. —è —Å—é–¥–∞ –ø—Ä–∏—à–µ–ª —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫ –≤ state –Ω–µ—Ç 'title_expense'. –î–æ–±–∞–≤–ª—è–µ–º.
    # keyboard = kb.keyboards_main_menu()
    # await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)
    dict_kb = {'–ù–∞–∑–∞–¥': 'add_expense'}
    keyboard = kb.create_in_kb(1, **dict_kb)
    await clb.message.edit_text(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{title_expense}</b>', reply_markup=keyboard)
    await state.set_state(ExpenseFSM.state_add_amount_expense)
    await clb.answer()



@router.message(StateFilter(ExpenseFSM.state_add_amount_expense))
async def process_add_amount_expense_input(message: Message, state: FSMContext, bot: Bot) -> None:
    """ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –†–∞—Å—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ), –≤—ã–≤–æ–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    logging.info('process_add_title_expense_input')

    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-i)
    #     except:
    #         pass

    title_expense = (await state.get_data())['title_expense']
    amount_expense = message.text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if validate_amount(amount=amount_expense):
        await state.update_data({'amount_expense': amount_expense})

        calendar = aiogram_calendar.SimpleCalendar(show_alerts=True)
        calendar.set_dates_range(datetime(2024, 1, 1), datetime(2030, 12, 31))
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now()
        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–µ –≤ —Å—Ç—Ä–æ–∫—É
        date1 = current_date.strftime('%m/%d/%y')
        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫
        list_date1 = date1.split('/')
        await message.answer(
            f'–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{title_expense}"</b>:',
            reply_markup=await calendar.start_calendar(year=int('20'+list_date1[2]), month=int(list_date1[0]))
        )

    else:
        keyboard = kb.keyboards_main_menu()
        await message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)
        dict_kb = {'–ù–∞–∑–∞–¥': 'add_expense'}
        keyboard = kb.create_in_kb(1, **dict_kb)
        await message.answer(text=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º', reply_markup=keyboard)

    #await state.set_state(ExpenseFSM.state_add_amount_expense)



@router.callback_query(aiogram_calendar.SimpleCalendarCallback.filter(), StateFilter(ExpenseFSM.state_add_amount_expense))
async def process_simple_calendar_start(clb: CallbackQuery, callback_data: CallbackData, state: FSMContext, bot: Bot):
    logging.info(f'process_simple_calendar_start {clb.message.chat.id}')
    calendar = aiogram_calendar.SimpleCalendar(show_alerts=True)
    calendar.set_dates_range(datetime(2022, 1, 1), datetime(2030, 12, 31))
    selected, date = await calendar.process_selection(clb, callback_data)
    if selected:
        #data_note = date.strftime("%Y-%m-%d")
        await state.update_data(date_expense=date.strftime("%d-%m-%Y"))
        dict_data = await state.get_data()
        id_event = await rq.get_current_event_id()
        dict_expense_to_add_db = {'tg_id': clb.message.chat.id, 'title_expense': dict_data['title_expense'],
                                  'amount_expense': dict_data['amount_expense'],
                                  'id_event': id_event, 'date_expense': dict_data['date_expense']}
        await rq.add_expense(dict_expense_to_add_db)

        keyboard = kb.keyboards_main_menu()
        await clb.message.answer(text=f'–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ {dict_data["title_expense"]} –Ω–∞ —Å—É–º–º—É'
                                      f' {dict_data["amount_expense"]} —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π {dict_data["date_expense"]}'
                                      f' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –±—é–¥–∂–µ—Ç',
                                 reply_markup=keyboard)
        logging.info(f'await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')
        await state.set_state(state=None)
        logging.info(f'await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')
        await state.clear()
        logging.info(f'await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')
        await process_expense(clb.message, bot)
    # else:
    #     await clb.answer(text=f'–í—ã –Ω–∏—á–µ–≥–æ –≤—ã–±—Ä–∞–ª–∏', show_alert=True)
    await clb.answer()








@router.callback_query(F.data == 'button_back_process_expense')

async def process_button_back_(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤ –º–æ–¥—É–ª–µ  add_expense, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å–º–∏ –æ—Ç –Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
    logging.info('process_button_back_')

    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass
    current_state = await state.get_state()
    logging.info(f'current_state = {current_state}')
    if current_state == ExpenseFSM.state_add_title_expense:
        await process_expense(message=clb.message, bot=bot)
    await state.set_state(state=None)
    await clb.answer()
