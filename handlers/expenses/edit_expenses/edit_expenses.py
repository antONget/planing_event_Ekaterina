from aiogram import F, Router, Bot


from aiogram.types import Message, CallbackQuery

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


import keyboards.keyboards as kb
import database.requests as rq
import database.help_function as hf

router = Router()

storage = MemoryStorage()

import logging

class EditExpenseFSM(StatesGroup):
    state_edit_title_expense = State()
    state_edit_amount_expense = State()
    state_edit_date_expense = State()
    state_after_input_title_expense = State()

    #state_finish_period_expense = State()


@router.callback_query(F.data.endswith('expense_category'))
@router.callback_query(F.data.endswith('expense_period'))
async def process_edit_expenses(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """C–æ–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, ! - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ–≥–æ –Ω–µ –ø–µ—Ä–µ–±–∏–ª —Ç–µ–∫—Å—Ç–æ–º"""

    logging.info(f'process_edit_expenses --- clb.data = {clb.data}')
    #await state.clear()
    id_expense = int(clb.data.split('!')[0])
    data_expense = await rq.get_expense_by_id(id_expense=id_expense)
    title_expense = data_expense.title_expense
    date_expense = data_expense.date_expense
    amount_expense = data_expense.amount_expense
    ##await hf.process_del_message_clb(4, bot, clb)
    #await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=kb.keyboards_main_menu())
    kb_dict = {'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è': f'edit_expense!{id_expense}',
                '–£–¥–∞–ª–∏—Ç—å ‚ùå': f'delete_expense!{id_expense}',
                '–ù–∞–∑–∞–¥': 'my_expenses'}

    keyboard = kb.create_in_kb(2, **kb_dict)
    await clb.message.edit_text(text=f'–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–ø–∏—Å—å—é –æ —Ä–∞—Å—Ö–æ–¥–µ <b>"{title_expense}"</b> \n{amount_expense} ‚ÇΩ\nüóì {date_expense}?', reply_markup=keyboard)
    await state.clear()
    await state.update_data(id_expense_to_edit = id_expense)### –¥–ª—è –∫–æ–Ω–æ–ø–∫–∏ –ü–û–î–¢–í–ï–†–î–ò–¢–¨
    ## –ü—Ä–æ–≤–µ—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logging.info(f'await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –†–∞—Å—Ö–æ–¥–æ–≤
    # id_expense_to_edit -  —Ç—Ç–æ—Ç id —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å
    # edit_title_expense, edit_amount_expense, edit_date_expense - —Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —Å—É–º–º—ã –∏ –¥–∞—Ç—ã –†–∞—Å—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ id
    await clb.answer()




@router.callback_query(F.data.startswith('edit_expense'))
async def process_edit_expense(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –†–∞—Å—Ö–æ–¥"""
    try:
        logging.info(f'process_edit_expense --- clb.data = {clb.data}')
    except:
        logging.info(f'process_edit_expense --- clb.data = -------')

    # –í —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —è –º–æ–≥—É –ø–æ–ø–∞—Å—Ç—å –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.
    # 1 - –ö–Ω–æ–ø–∫–∞ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    # 2 - –í—ã–∑–æ–≤–æ–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ process_edit_expense_category –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ state_edit_title_expense = State()
    # –∏ –µ—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ state_edit_title_expense = State(), —Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –†–∞—Å—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ FSM –∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–µ
    logging.info(f'await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')

    if await state.get_state() == None:
        id_expense = int(clb.data.split('!')[-1]) # —ç—Ç–æ—Ç id –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –Ω–æ–≤–æ–π

        data_expense = await rq.get_expense_by_id(id_expense)
        title_expense = data_expense.title_expense
        amount_expense = data_expense.amount_expense
        date_expense = data_expense.date_expense

    elif await state.get_state() == EditExpenseFSM.state_edit_title_expense: # –¢–û–õ–¨–ö–û –ù–û–í–û–ï –ò–ú–Ø –ø–æ –Ω–æ–≤–æ–º—É id. –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ id –∏–∑ state
        id_expense = int(clb.data.split('!')[-1]) # # –¢–û–õ–¨–ö–û –ù–û–í–û–ï –ò–ú–Ø –ø–æ –Ω–æ–≤–æ–º—É id. –æ–Ω–æ –≤ –∫–æ–ª–±—ç–∫–µ
        title_expense = (await rq.get_expense_by_id(id_expense)).title_expense
        # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(edit_title_expense = title_expense)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ id –ø–æ —Ç–æ–º—É, —á—Ç–æ –≤ state:
        id_expense = (await state.get_data())['id_expense_to_edit']
        #title_expense = (await state.get_data())['edit_title_expense'] if 'edit_title_expense' in list(await state.get_data()) else (await rq.get_expense_by_id(id_expense)).title_expense
        date_expense = (await state.get_data())['edit_date_expense'] if 'edit_date_expense' in list(await state.get_data()) else (await rq.get_expense_by_id(id_expense)).date_expense
        amount_expense = (await state.get_data())['edit_amount_expense'] if 'edit_amount_expense' in list(await state.get_data()) else (await rq.get_expense_by_id(id_expense)).amount_expense

    elif await state.get_state() == EditExpenseFSM.state_after_input_title_expense or await state.get_state() == EditExpenseFSM.state_edit_amount_expense or await state.get_state() == EditExpenseFSM.state_edit_date_expense:

        id_expense = (await state.get_data())['id_expense_to_edit']

        title_expense = (await state.get_data())['edit_title_expense'] if 'edit_title_expense' in list(await state.get_data()) else (await rq.get_expense_by_id(id_expense)).title_expense
        amount_expense = (await state.get_data())['edit_amount_expense'] if 'edit_amount_expense' in list(await state.get_data()) else (await rq.get_expense_by_id(id_expense)).amount_expense
        date_expense = (await state.get_data())['edit_date_expense'] if 'edit_date_expense' in list(await state.get_data()) else (await rq.get_expense_by_id(id_expense)).date_expense

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(state=None)

    kb_dict = {f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {title_expense}': f'next_edit_expense!category!{id_expense}',
                f'–°—É–º–º–∞ {amount_expense}': f'next_edit_expense!amount!{id_expense}',
                f'–î–∞—Ç–∞ {date_expense}':f'next_edit_expense!date!{id_expense}',
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å': f'confirm_expense_edit!{id_expense}',
                '–ù–∞–∑–∞–¥': f'{id_expense}!expense_category'}
    keyboard=kb.create_in_kb(1, **kb_dict)
    try:
        # await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:',
        #                         reply_markup=kb.keyboards_main_menu())
        await clb.message.edit_text(text=f'–ö–∞–∫–æ–µ –ø–æ–ª–µ –æ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)
        await clb.answer()
    except:
        #await hf.process_del_message_messsage(1, bot, clb)
        # await clb.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:',
                                # reply_markup=kb.keyboards_main_menu())
        await clb.answer(text=f'–ö–∞–∫–æ–µ –ø–æ–ª–µ –æ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)




@router.callback_query(F.data.startswith('confirm_expense_edit!'))
async def process_confirm_edit_expense(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""

    logging.info(f'process_confirm_edit_expense --- clb.data = {clb.data}')

    state_data = await state.get_data()
    id_expense = state_data['id_expense_to_edit']
    if 'edit_title_expense' in list(state_data):
        await rq.set_expense(id_expense=id_expense, title_expense=state_data['edit_title_expense'])
    if 'edit_amount_expense' in list(state_data):
        await rq.set_expense(id_expense=id_expense, amount_expense=state_data['edit_amount_expense'])
    if 'edit_date_expense'in (state_data):
        await rq.set_expense(id_expense=id_expense, date_expense=state_data['edit_date_expense'])
    await clb.message.answer(text=f'–†–∞—Å—Ö–æ–¥ <b>"{(await rq.get_expense_by_id(id_expense)).title_expense}"</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞–≤–ª–µ–Ω.')
    await clb.answer()
    await process_edit_expense(clb, state, bot)
