from aiogram import F, Router, Bot

from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.state import State, default_state, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from handlers.tasks.add_tasks import process_task

import keyboards.keyboards as kb

from filters.admin_filter import check_super_admin
from database.models import User
import database.requests as rq
import database.help_function as hf
from datetime import time, date, datetime, timedelta
from filters.admin_filter import IsSuperAdmin
from filters.filters import validate_date, validate_overdue



router = Router()

storage = MemoryStorage()

import logging
import asyncio


class EditTaskFSM(StatesGroup):
    state_edit_title_task = State()
    state_edit_deadline = State()



@router.callback_query(F.data == 'my_tasks')
async def process_my_tasks(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ú–æ–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∫–∞–∑–∞—Ç—å –ó–∞–¥–∞—á–∏"""
    logging.info('process_my_tasks')

    await state.clear()

    id_event = await rq.get_current_event_id()
    title_event = await rq.get_current_event()
    list_tasks: list = []
    dict_status: dict = {'active': 'üõ†', 'complete': '‚úÖ', 'overdue': '‚ùå', 'note': 'üìù',}

    # –ó–∞–ø—É—Å–∫–∞—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á, –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Å—Ç–∞–≤–ª—é —Å—Ç–∞—Ç—É—Å overdue
    await hf.check_status_task()

    for task in await rq.get_tasks(): # –∫–∞–∫–∏–µ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Event, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if id_event == task.id_event and task.status_task!='location' and task.status_task!='performer' and task.tg_id == clb.message.chat.id: # –µ—Å–ª–∏ —ç—Ç–∞ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω—É–∂–Ω–æ–º—É –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é

            text_button = f'{task.title_task} {dict_status[task.status_task]}'
            callback = f'do_task!{task.id}!{task.title_task}!{task.status_task}!{task.id_event}'
            #dict_events[key] = value
            list_tasks.append([text_button, callback])
    logging.info(f'list_tasks = {list_tasks}')

    # keyboard = kb.keyboards_main_menu()
    # await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{title_event}"</b>:', reply_markup=keyboard)

    if not list_tasks: # –µ—Å–ª–∏ –ø—É—Å—Ç–æ –≤ —Ç–∞–±–ª—Ü–µ Task
        await clb.message.edit_text(text=f'–î–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>"{title_event}"</b> –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.')
    else: # –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Event –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–∂—É –Ω–∞ –∫–Ω–æ–ø–∫–∏
        keyboard = kb.create_kb_pagination(
            list_button=list_tasks,
            back=0,
            forward=2,
            count=5,
            prefix='task',
            button_go_away='go_to_process_task',
        )
        await clb.message.edit_text(text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏', reply_markup=keyboard)
    await clb.answer()




# >>>>
@router.callback_query(F.data.startswith('button_forward!task'))
async def process_forward_task(clb: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_forward_task: {clb.message.chat.id} ----- clb.data = {clb.data}')

    forward = int(clb.data.split('!')[-1]) + 1
    back = forward - 2
    logging.info(f'forward = {forward} --- back = {back}')

    id_event = await rq.get_current_event_id()
    title_event = await rq.get_current_event()
    list_tasks: list = []
    dict_status: dict = {'active': 'üõ†', 'complete': '‚úÖ', 'overdue': '‚ùå', 'note': 'üìù',}

    # –ó–∞–ø—É—Å–∫–∞—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á, –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Å—Ç–∞–≤–ª—é —Å—Ç–∞—Ç—É—Å overdue
    await hf.check_status_task()

    for task in await rq.get_tasks(): # –∫–∞–∫–∏–µ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Event, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if id_event == task.id_event and task.status_task!='location' and task.status_task!='performer' and task.tg_id == clb.message.chat.id: # –µ—Å–ª–∏ —ç—Ç–∞ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω—É–∂–Ω–æ–º—É –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é

            text_button = f'{task.title_task} {dict_status[task.status_task]}'
            callback = f'do_task!{task.id}!{task.title_task}!{task.status_task}!{task.id_event}'
            #dict_events[key] = value
            list_tasks.append([text_button, callback])
    logging.info(f'list_tasks = {list_tasks}')


    keyboard = kb.create_kb_pagination(
                    list_button=list_tasks,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='task',
                    button_go_away='go_to_process_task',
                )
    #logging.info(f'keyboard = {keyboard}')
    #await asyncio.sleep(7)

    try:
        await clb.message.edit_text(text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏', reply_markup=keyboard)
    except:
        await clb.message.edit_text(text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ªe –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏', reply_markup=keyboard)
    await clb.answer()


# <<<<
@router.callback_query(F.data.startswith('button_back!task'))
async def process_back_choice_performer(clb: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_back_choice_performer: {clb.message.chat.id} ----- clb.data = {clb.data}')

    back = int(clb.data.split('!')[-1]) - 1
    forward = back + 2
    logging.info(f'forward = {forward} --- back = {back}')

    id_event = await rq.get_current_event_id()
    title_event = await rq.get_current_event()
    list_tasks: list = []
    dict_status: dict = {'active': 'üõ†', 'complete': '‚úÖ', 'overdue': '‚ùå', 'note': 'üìù',}

    # –ó–∞–ø—É—Å–∫–∞—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á, –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Å—Ç–∞–≤–ª—é —Å—Ç–∞—Ç—É—Å overdue
    await hf.check_status_task()

    for task in await rq.get_tasks(): # –∫–∞–∫–∏–µ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Event, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if id_event == task.id_event and task.status_task!='location' and task.status_task!='performer' and task.tg_id == clb.message.chat.id: # –µ—Å–ª–∏ —ç—Ç–∞ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω—É–∂–Ω–æ–º—É –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é

            text_button = f'{task.title_task} {dict_status[task.status_task]}'
            callback = f'do_task!{task.id}!{task.title_task}!{task.status_task}!{task.id_event}'
            #dict_events[key] = value
            list_tasks.append([text_button, callback])
    logging.info(f'list_tasks = {list_tasks}')



    keyboard = kb.create_kb_pagination(
                    list_button=list_tasks,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='task',
                    button_go_away='go_to_process_task',
                )
   # logging.info(f'keyboard = {keyboard}')
    try:
        await clb.message.edit_text(text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Çe –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏', reply_markup=keyboard)
    except:
        await clb.message.edit_text(text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ªe –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥a–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏', reply_markup=keyboard)
    await clb.answer()




@router.callback_query(F.data.startswith('do_task'))
async def process_do_task(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏. –ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –ó–∞–¥–∞—á–µ–π"""
    logging.info(f'process_do_task --- callback.data = {clb.data}') # callback = f'do_task!{task.id}!{task.title_task}!{task.status_task}!{task.id_event}'

    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass

    id_task = clb.data.split('!')[-4]
    title_task = clb.data.split('!')[-3]
    status_task = clb.data.split('!')[-2]
    id_event = clb.data.split('!')[-1]
    await state.clear()
    await state.update_data({'id_task': id_task, 'status_task': status_task, 'id_event': id_event})

    title_event = await rq.get_current_event()

    # keyboard = kb.keyboards_main_menu()
    # await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{title_event}"</b>:', reply_markup=keyboard)

    note_task = '–∑–∞–º–µ—Ç–∫–æ–π' if status_task == 'note' else '–∑–∞–¥–∞—á–µ–π'
    if status_task in ['active', 'overdue']:
        kb_dict = {'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è': f'edit_tast!{id_task}!{title_task}!{status_task}!{id_event}',
                '–£–¥–∞–ª–∏—Ç—å ‚ùå': f'delete_tast!{id_task}!{title_task}!{status_task}!{id_event}',
                '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é':f'mark_as_complete!{id_task}!{title_task}!{status_task}!{id_event}',
                '–ù–∞–∑–∞–¥': 'go_to_process_my_tasks'}
        keyboard=kb.create_in_kb(1, **kb_dict)
    else:
        kb_dict = {'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è': f'edit_tast!{id_task}!{title_task}!{status_task}!{id_event}',
                '–£–¥–∞–ª–∏—Ç—å ‚ùå': f'delete_tast!{id_task}!{title_task}!{status_task}!{id_event}',
                '–ù–∞–∑–∞–¥': 'go_to_process_my_tasks'}
        keyboard=kb.create_in_kb(2, **kb_dict)
    await clb.message.edit_text(text=f'–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Å {note_task} <b>"{title_task}"</b>:', reply_markup=keyboard)
    await clb.answer()


@router.callback_query(F.data == 'go_to_process_my_tasks')
async def go_to_process_my_tasks(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤ process_do_task, –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ process_my_tasks"""
    logging.info('go_to_process_my_tasks')

    await process_my_tasks(clb=clb, state=state, bot=bot)
    await clb.answer()



@router.callback_query(F.data.startswith('edit_tast'))
async def process_edit_task(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ"""
    try:
        logging.info(f'process_edit_task --- clb.data = {clb.data}') # callback = f'edit_tast!{id_task}!{title_task}!{status_task}!{id_event}'
    except:
        logging.info(f'process_edit_task --- clb.data =')

    # –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –¥–µ–∞–¥–ª–∞–π–Ω–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(state=None)

    dict_data_state = await state.get_data()
    logging.info(f'dict_data_state = {dict_data_state}')
    if 'new_title_task' in list(dict_data_state)  or 'new_deadline' in list(dict_data_state): # —Ä–∞–±–æ—Ç–∞–µ–º —Å message –∞ –Ω–µ clb
        id_task = dict_data_state['id_task']
        status_task = dict_data_state['status_task']
        id_event = dict_data_state['id_event']
        title_event = await rq.get_current_event()

        title_task = dict_data_state['new_title_task'] if 'new_title_task' in list(dict_data_state) else (await rq.get_task_by_id(id_task=id_task)).title_task
        deadline = dict_data_state['new_deadline'] if 'new_deadline' in list(dict_data_state) else (await rq.get_task_by_id(id_task=id_task)).deadline_task

    else:
        id_task = clb.data.split('!')[-4]
        title_task = clb.data.split('!')[-3]
        status_task = clb.data.split('!')[-2]
        id_event = clb.data.split('!')[-1]
        title_event = await rq.get_current_event()
        deadline = (await rq.get_task_by_id(id_task=id_task)).deadline_task

    note_task = '–∑–∞–º–µ—Ç–∫–∏' if status_task == 'note' else '–∑–∞–¥–∞—á–∏'
    if status_task != 'note': # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞, —Ç–æ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –∏ –¥–µ–¥–ª–∞–π–Ω
        kb_dict = {f'–ù–∞–∑–≤–∞–Ω–∏–µ "{title_task}"': f'edit_title_task!{id_task}!{title_task}!{status_task}!{id_event}',
                f'Deadline {deadline}': f'edit_deadline_task!{id_task}!{title_task}!{status_task}!{id_event}',
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':f'confirm_task',
                '–ù–∞–∑–∞–¥': f'do_task!{id_task}!{title_task}!{status_task}!{id_event}'}

    else:
        kb_dict = {f'–ù–∞–∑–≤–∞–Ω–∏–µ "{title_task}"': f'edit_title_task?{id_task}!{title_task}!{status_task}!{id_event}',
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':f'confirm_task',
                '–ù–∞–∑–∞–¥': f'do_task!{id_task}!{title_task}!{status_task}!{id_event}'}

    keyboard_reply = kb.keyboards_main_menu()
    keyboard=kb.create_in_kb(1, **kb_dict)

    if 'new_title_task' in list(dict_data_state)  or 'new_deadline' in list(dict_data_state): # —Ä–∞–±–æ—Ç–∞–µ–º —Å message –∞ –Ω–µ clb:
        #await hf.process_del_message_messsage(3, bot, message=clb)
        await clb.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{title_event}"</b>:', reply_markup=keyboard_reply) # —Ç—É—Ç clb —ç—Ç–æ message –ø—Ä—Ä–∏ –≤—ã–∑–æ–≤–µ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        await clb.answer(text=f'–ö–∞–∫–æ–µ –ø–æ–ª–µ –¥–ª—è {note_task} <b>"{title_task}"</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)
    else:
        #await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{title_event}"</b>:', reply_markup=keyboard_reply)
        await clb.message.edit_text(text=f'–ö–∞–∫–æ–µ –ø–æ–ª–µ –¥–ª—è {note_task} <b>"{title_task}"</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)
        await clb.answer()


@router.callback_query(F.data.startswith('edit_title_task'))
@router.callback_query(F.data.startswith('edit_deadline_task'))
async def process_edit_title_deadline_task(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ Deadline –≤ —Ä–∞–∑–¥–µ–ª–µ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ó–∞–¥–∞—á—É, –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ó–∞–¥–∞—á–∏"""
    logging.info(f'process_edit_title_deadline_task --- clb.data = {clb.data}')

    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass


    # keyboard = kb.keyboards_main_menu()
    # await clb.message.answer(text=f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º <b>"{await rq.get_current_event()}"</b>:', reply_markup=keyboard)
    callback_data = clb.data.split('?')[-1] # –ø—Ä–∏—Å—Ç—ë–≥–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ –Ω–∞–∑–∞–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —á–∞—Å—Ç—å –∫–æ–ª–±—ç–∫–∞
    dict_kb = {'–ù–∞–∑–∞–¥': f'edit_tast!{callback_data}'}
    keyboard = kb.create_in_kb(1, **dict_kb)

    title_task = clb.data.split('!')[-3]
    if 'edit_title_task' in clb.data:
        await state.set_state(EditTaskFSM.state_edit_title_task)
        await clb.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏', reply_markup=keyboard)
        await clb.answer()
    elif 'edit_deadline_task' in clb.data:
        await state.set_state(EditTaskFSM.state_edit_deadline)
        await clb.message.edit_text(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ <b>"{title_task}"</b>. –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏: —á—á:–º–º –¥–¥.–º–º.–≥–≥–≥–≥', reply_markup=keyboard)
        await clb.answer()


@router.message(StateFilter(EditTaskFSM.state_edit_title_task))
async def process_edit_title_task_input_text(message: Message, state: FSMContext, bot: Bot) -> None:
    """–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –≤ state –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ó–∞–¥–∞—á–∏"""
    logging.info(f'process_edit_title_task_input_text: {message.chat.id} ----- message.text = {message.text}')
    new_title_task = message.text
    await state.update_data({'new_title_task': new_title_task})
    await process_edit_task(clb = message, state = state, bot=bot)


@router.message(StateFilter(EditTaskFSM.state_edit_deadline))
async def process_edit_deadline_task_input_text(message: Message, state: FSMContext, bot: Bot) -> None:
    """–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –≤ state –Ω–æ–≤–æ–≥–æ deadline –ó–∞–¥–∞—á–∏"""
    logging.info(f'process_edit_deadline_task_input_text: {message.chat.id} ----- message.text = {message.text}')

    dict_data_state = await state.get_data()
    new_dedline = message.text
    id_task = dict_data_state['id_task']
    dict_data_state = await state.get_data()
    title_task = dict_data_state['new_title_task'] if 'new_title_task' in list(dict_data_state) else (await rq.get_task_by_id(id_task=id_task)).title_task
    status_task = (await rq.get_task_by_id(id_task=id_task)).status_task
    id_event = (await rq.get_task_by_id(id_task=id_task)).id_event

    #await hf.process_del_message_messsage(2, bot, message)
    if validate_date(new_dedline): # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
        if validate_overdue(new_dedline):
            await state.update_data({'new_deadline': new_dedline})
            await process_edit_task(clb = message, state = state, bot=bot)

        else: # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞
            logging.info('–ü–†–û–°–†–û–ß–ö–ê')
            dict_kb = {'–ù–∞–∑–∞–¥': f'edit_tast!{id_task}!{title_task}!{status_task}!{id_event}'},   #'go_to_process_edit_task'} # f'edit_tast!{id_task}!{title_task}!{status_task}!{id_event}',
            keyboard = kb.create_in_kb(1, **dict_kb)
            await message.answer(text=f'–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Å—Ç–∞–ª–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –ü—Ä–∏—à–ª–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {title_task}. –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏: —á—á:–º–º –¥–¥.–º–º.–≥–≥–≥–≥', reply_markup=keyboard)
            return

    else: # –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –≤–≤–æ–¥–∞
        logging.info('–ù–ï –ü–†–û–®–õ–ê –í–ê–õ–ò–î–ê–¶–ò–Æ')
        dict_kb = {'–ù–∞–∑–∞–¥': f'edit_tast!{id_task}!{title_task}!{status_task}!{id_event}'}     #'go_to_process_edit_task'}gggg
        keyboard = kb.create_in_kb(1, **dict_kb)
        await message.answer(text=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –¥–µ–¥–ª–∞–π–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {title_task}. –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏: —á—á:–º–º –¥–¥.–º–º.–≥–≥–≥–≥', reply_markup=keyboard)


@router.callback_query(F.data == 'go_to_process_edit_task')
async def go_to_process_edit_tasks(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤ process_edit_deadline_task_input_text, –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ process_edit_task"""
    logging.info('go_to_process_edit_task')

    await process_edit_task(clb=clb, state=state, bot=bot)
    await clb.answer()


@router.callback_query(F.data.startswith('delete_tast'))
async def process_delete_tast(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ó–∞–¥–∞—á—É"""
    logging.info('process_delete_tast')

    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass

    title_task = clb.data.split('!')[-3]
    id_task = clb.data.split('!')[-4]
    await rq.delete_task(id_task=id_task)
    keyboard = kb.keyboards_main_menu()
    await clb.message.answer(text=f'–ó–∞–¥–∞—á–∞ <b>"{title_task}"</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', reply_markup=keyboard)
    await process_task(clb.message, bot)
    await clb.answer()



@router.callback_query(F.data.startswith('confirm_task'))
async def process_confirm_edit_task(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."""
    logging.info(f'process_confirm_edit_task ---')

    dict_data_state = await state.get_data()
    logging.info(f'dict_data_state = {dict_data_state}')

    id_task = dict_data_state['id_task']
    if 'new_title_task' in list(dict_data_state):
        title_task = dict_data_state['new_title_task']
        await rq.set_task(id_task=id_task, title_task=title_task)
    else:
        title_task = (await rq.get_task_by_id(id_task)).title_task
    if 'new_deadline' in list(dict_data_state):
        new_deadline = dict_data_state['new_deadline']
        await rq.set_task(id_task=id_task, deadline_task=new_deadline)
    keyboard = kb.keyboards_main_menu()
    await clb.message.answer(text=f'–ó–∞–¥–∞—á–∞ <b>"{title_task}"</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.', reply_markup=keyboard)
    await clb.answer()
    await process_task(clb.message, bot)


    #—Å–¥–µ–ª–∞—Ç—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
    #'–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é':f'mark_as_complete!{id_task}!{title_task}!{status_task}!{id_event}
@router.callback_query(F.data.startswith('mark_as_complete'))
async def process_mark_as_complete(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."""
    logging.info(f'process_mark_as_complete ---')

    # for i in range (3):
    #     try:
    #         await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-i)
    #     except:
    #         pass
    id_task = clb.data.split('!')[-4]
    await rq.set_task(id_task=id_task, status_task='complete')
    await clb.answer()
    await process_my_tasks(clb=clb, state=state, bot= Bot)
    # await process_do_task(clb=clb, state=state, bot= Bot)
