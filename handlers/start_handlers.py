from aiogram import F, Router, Bot

from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.state import State, default_state, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


import keyboards.keyboards as kb
from filters.admin_filter import check_super_admin
from database.models import User
import database.requests as rq
import database.help_function as hf
from datetime import time, date, datetime, timedelta
from handlers.feedback.feedback import process_feedback

router = Router()

storage = MemoryStorage()

import logging
import asyncio

class StartFSM(StatesGroup):
    state_inpup_event = State()
    state_rename_event = State()
  #  st_2 = State()
   # st_3 = State()





# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
#@router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üÜï')
async def process_start_command(message: Message,  bot: Bot, state: FSMContext):
    logging.info(f'process_start_command')

    await state.set_state(state=None)
    # –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ—â–µ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if not user:
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = "user_name"

        data_user = {"tg_id": message.from_user.id,
                     "user_name": username}
        await rq.add_user(data=data_user)
    kb_dict = {'–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏': 'start_handler_feedback',
               '–ù–∞—á–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ': 'start_handler_event'}
    keyboard = kb.create_in_kb(1, **kb_dict)
    await message.answer(text=f'–í—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å–µ—Ç–∏–ª–∏,'
                         f' –ª–∏–±–æ –Ω–∞—á–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–µ –º–æ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∞ —Ç–∞–∫–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ.',
                         reply_markup=keyboard)





@router.callback_query(F.data == 'start_handler_event')
async def process_start_handler_event(clb: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logging.info(f'process_start_handler_event --- clb.data = {clb.data}')
    await state.set_state(StartFSM.state_inpup_event)
    # –í—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # if await check_super_admin(telegram_id=message.from_user.id):
    #     # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ç–æ
    #         # –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π,
    #         # –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    #     #dict_events: dict = {}
    list_events: list = []
    for event in await rq.get_events(): # –∫–∞–∫–∏–µ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Event, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if event.tg_id == clb.message.chat.id:
            key = event.id
            value = event.title_event
            #dict_events[key] = value
            list_events.append([value, f'{key}!events_start'])
    logging.info(f'list_events = {list_events}')

    if not list_events: # –µ—Å–ª–∏ –ø—É—Å—Ç–æ –≤ —Ç–∞–±–ª—Ü–µ Event

        await clb.message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    else: # –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Event –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–∂—É –Ω–∞ –∫–Ω–æ–ø–∫–∏
        keyboard = kb.create_kb_pagination(
            list_button=list_events,
            back=0,
            forward=2,
            count=5,
            prefix='start',
            #button_set_state='set_state_add_event'
        )
        await clb.message.answer(text='–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ', reply_markup=keyboard)
    # else: # –ï—Å–ª–∏ —ç —Ç–æ –Ω–µ –∞–¥–º–∏–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    #     await process_feedback(message, bot, state)
    await clb.answer()


# >>>>
@router.callback_query(F.data.startswith('button_forward!start'))
async def process_forward(clb: CallbackQuery) -> None:
    logging.info(f'process_forward: {clb.message.chat.id} ----- clb.data = {clb.data}')
    #list_learners = [learner for learner in await rq.get_all_learners()]
    tg_id = clb.message.chat.id

    forward = int(clb.data.split('!')[-1]) + 1
    back = forward - 2
    logging.info(f'forward = {forward} --- back = {back}')
    list_events: list = []
    for event in await rq.get_events(): # –∫–∞–∫–∏–µ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Event, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if event.tg_id == clb.message.chat.id:
            key = event.id
            value = event.title_event
            list_events.append([value, f'{key}!events_start'])

    keyboard = kb.create_kb_pagination(
                    list_button=list_events,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='start',
                    #button_set_state='set_state_add_event'
                )


    #keyboard = kb.kb_choise_learners(action='delete_learner', list_learners=list_learners, back=back, forward=forward, count=6)
    try:
        await clb.message.edit_text(text='–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ', reply_markup=keyboard)

    except:
        await clb.message.edit_text(text='–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ωoe', reply_markup=keyboard)
    await clb.answer()



# <<<<
@router.callback_query(F.data.startswith('button_back!start'))
async def process_forward(clb: CallbackQuery) -> None:
    logging.info(f'process_back: {clb.message.chat.id} ----- clb.data = {clb.data}')
    #list_learners = [learner for learner in await rq.get_all_learners()]
    tg_id = clb.message.chat.id

    back = int(clb.data.split('!')[-1]) - 1
    forward = back + 2
    logging.info(f'forward = {forward} --- back = {back}')

    list_events: list = []
    for event in await rq.get_events(): # –∫–∞–∫–∏–µ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Event, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if event.tg_id == clb.message.chat.id:
            key = event.id
            value = event.title_event
            list_events.append([value, f'{key}!events_start'])

    keyboard = kb.create_kb_pagination(
                    list_button=list_events,
                    back=back,
                    forward=forward,
                    count=5,
                    prefix='start',
                    #button_set_state='set_state_add_event'
                )

    try:
        await clb.message.edit_text(text='–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ', reply_markup=keyboard)

    except:
        await clb.message.edit_text(text='–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ωoe', reply_markup=keyboard)
    await clb.answer()


# @router.callback_query(F.data == 'set_state_add_event')
# async def process_set_state_add_event(clb: CallbackQuery, state: FSMContext) -> None:
#     """–ë—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
#     logging.info(f'process_set_state_add_event: {clb.message.chat.id} ----- clb.data = {clb.data}')
#     await state.set_state(StartFSM.state_inpup_event)
#     await clb.message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')




@router.message(StateFilter(StartFSM.state_inpup_event))#, F.text)
@router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
async def process_add_event(message: Message, state: FSMContext, bot: Bot) -> None:
    logging.info(f'process_add_event: {message.chat.id} ----- message.text = {message.text}')

    tg_id = message.chat.id

    if message.text != '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':



        title_event = message.text
        dict_event: dict = {'tg_id': tg_id, 'title_event': title_event}
        await rq.add_event(dict_event)

        # –ø–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ id –≤ —Ç–∞–±–ª–∏—Ü–µ Event (–∏–º–µ–Ω–Ω–æ —Ç—É–¥–∞ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ)
        id_event = await hf.get_max_id_event()
        dict_current_event = {'id_event': id_event, 'tg_id': tg_id, 'title_event': title_event}

        current_event = await rq.get_current_event_all_model()
        if not current_event:
            await rq.add_current_event(dict_current_event)
        else:
            await rq.set_current_event(tg_id=tg_id, id_event=id_event, title_event=title_event)
    else:
        await state.set_state(state=None)
        title_event = await rq.get_current_event()

    await message.answer(
    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EventPlannerBot!\n–ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –ø–æ–¥–±–µ—Ä—ë—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π; "
        f"—Å–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –±—é–¥–∂–µ—Ç; –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∑–∞–¥–∞—á; —Å–æ–±–µ—Ä–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{title_event}</b>:",
        reply_markup=kb.keyboards_common_four_buttons())
    logging.info(f'await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')
    await state.clear()
    logging.info(f'–°–ë–†–ê–°–´–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')



@router.callback_query(F.data.endswith('events_start')) # –ø—Ä–∏—Ö–æ–∂—É —Å—é–¥–∞ –ø–æ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ ['–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ 8', '8!events_start']
async def show_start_main_menu(clb: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ–∫–∞–∑ —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: '–ó–∞–¥–∞—á–∏', '–í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ', '–ë—é–¥–∂–µ—Ç', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏' """
    logging.info(f'show_start_main_menu --- clb.data = {clb.data}')
    await clb.answer()
    # –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ process_start_command –Ω–µ –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∏ –Ω–∞–∂–∞–ª –Ω–∞ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ,
    # —Ç–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    # —É–¥–∞–ª—è—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await clb.message.delete()

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã CurrentEvent (—Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    id_event = clb.data.split('!')[0]
    title_event = await rq.get_event_by_id(id_event=id_event)
    tg_id = await rq.get_tg_id_from_event_by_id(id_event=id_event)

    dict_current_event = {'id_event': id_event, 'tg_id': tg_id, 'title_event': title_event}

    current_event = await rq.get_current_event_all_model()
    current_event_bool = False
    for event in current_event:
        if event.id == 1:
           current_event_bool = True


    if not current_event_bool:
        await rq.add_current_event(dict_current_event)
    else:
        await rq.set_current_event(tg_id=tg_id, id_event=id_event, title_event=title_event)


    try:
        await clb.message.edit_text(
            text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EventPlannerBot!\n–ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –ø–æ–¥–±–µ—Ä—ë—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π; "
                f"—Å–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –±—é–¥–∂–µ—Ç; –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∑–∞–¥–∞—á; —Å–æ–±–µ—Ä–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{title_event}</b>:",
            reply_markup=kb.keyboards_common_four_buttons()
            )
    except:
        await clb.message.answer(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EventPlannerBot!\n–ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –ø–æ–¥–±–µ—Ä—ë—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π; "
            f"—Å–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –±—é–¥–∂–µ—Ç; –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∑–∞–¥–∞—á; —Å–æ–±–µ—Ä–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{title_event}</b>:",
        reply_markup=kb.keyboards_common_four_buttons()
        )
    await clb.answer()


@router.message(F.text == '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üí´')
async def process_rename_event(message: Message,  bot: Bot, state: FSMContext):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Even –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ CurrentEvent"""
    logging.info('process_rename_event')

    await state.set_state(StartFSM.state_rename_event)
    await message.answer(text=f'–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{await rq.get_current_event()}</b>\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')


@router.message(F.text, StateFilter(StartFSM.state_rename_event))
async def process_rename_event_set_table(message: Message,  bot: Bot, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Even –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ CurrentEvent"""
    logging.info(f'process_rename_event_set_table --- message.text = {message.text}')

    new_title_event = message.text
    id_event = await rq.get_current_event_id()
    await rq.set_current_event(tg_id=message.chat.id, id_event=id_event, title_event=new_title_event)
    await rq.set_event(tg_id=message.chat.id, id_event=id_event, title_event=new_title_event)
    await message.answer(text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ <b>"{new_title_event}"</b>')
    await message.answer(
    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EventPlannerBot!\n–ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –ø–æ–¥–±–µ—Ä—ë—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π; "
        f"—Å–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –±—é–¥–∂–µ—Ç; –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∑–∞–¥–∞—á; —Å–æ–±–µ—Ä–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{new_title_event}</b>:",
        reply_markup=kb.keyboards_common_four_buttons())
    logging.info(f'await state.get_data() = {await state.get_data()} await state.get_state() = {await state.get_state()}')
    await state.clear()



@router.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üëÄ')
async def process_show_event_feedback(message: Message,  bot: Bot, state: FSMContext):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã EventFeedback"""
    logging.info('process_show_event_feedback')

    id_event = await rq.get_current_event_id()
    for feedback in await rq.get_event_feedbacks():
        if feedback.id_event == id_event:
            await message.answer(text=f'–û—Ü–µ–Ω–∫–∞: {feedback.estimation}\n–û—Ç–∑—ã–≤: {feedback.feedback}')


@router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üÜï')
async def process_go_to_process_start_handler_event(message: Message,  bot: Bot, state: FSMContext):
    logging.info(f'process_go_to_process_start_handler_event')

    await state.set_state(state=None)
    list_events: list = []
    for event in await rq.get_events(): # –∫–∞–∫–∏–µ –µ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Event, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if event.tg_id == message.chat.id:
            key = event.id
            value = event.title_event
            #dict_events[key] = value
            list_events.append([value, f'{key}!events_start'])
    logging.info(f'list_events = {list_events}')

    if not list_events: # –µ—Å–ª–∏ –ø—É—Å—Ç–æ –≤ —Ç–∞–±–ª—Ü–µ Event

        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    else: # –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Event –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–∂—É –Ω–∞ –∫–Ω–æ–ø–∫–∏
        keyboard = kb.create_kb_pagination(
            list_button=list_events,
            back=0,
            forward=2,
            count=5,
            prefix='start',
            #button_set_state='set_state_add_event'
        )
        await message.answer(text='–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ', reply_markup=keyboard)
    # else: # –ï—Å–ª–∏ —ç —Ç–æ –Ω–µ –∞–¥–º–∏–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    #     await process_feedback(message, bot, state)
